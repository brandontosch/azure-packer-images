properties([
    // For CI integration with gitlabs.
    [$class: 'GitLabConnectionProperty', gitLabConnection: 'lai1pucreps0001.inf.local'],

    // Job parameter defintions.
    parameters([
        stringParam(
            description: 'Azure Environment ID',
            name: 'envid',
            defaultValue: ''
        )
    ])
])

// By default the job will use West US 2 as location.
def location = "westus2"
def envid = "${params.envid}".toLowerCase()
def nodeLabel = "jenkins-slave-packer-azure"
def resourceGroup = "${envid}images_rg"
def version = ''
def objectId = ''
def versionNumber = 'tbd'

node(nodeLabel) {
    // Retrieve azure secrets from vault.
    def azureSecrets = [
        [$class: 'VaultSecret', path: "secret/${envid}/azure", secretValues: [
            [$class: 'VaultSecretValue', envVar: 'ARM_SUBSCRIPTION_ID', vaultKey: 'subscription_id'],
            [$class: 'VaultSecretValue', envVar: 'ARM_TENANT_ID', vaultKey: 'tenant_id'],
            [$class: 'VaultSecretValue', envVar: 'ARM_CLIENT_SECRET', vaultKey: 'client_secret'],
            [$class: 'VaultSecretValue', envVar: 'ARM_CLIENT_ID', vaultKey: 'client_id'],
            [$class: 'VaultSecretValue', envVar: 'ARM_SPN_OBJECT_ID', vaultKey: 'principal_id']]]
    ]

    try {
        // Send slack notification that build has started.
        notifyBuild('STARTED', versionNumber)

        // For CI integration with gitlabs
        gitlabCommitStatus('packer') {
            // git stage
            // Jenkins retrieves lastest code from git
            stage('git') {
                checkout scm
            }

            // check stage
            // Jenkins runs checks to validate packer template syntax
            stage('check') {
                dir("windows/server_2012_r2_datacenter") {
                    ansiColor('xterm') {
                        sh 'packer validate -syntax-only template.json'
                    }
                }
            }
        }

        // If an environment id was not provided, then we assume this is a CI job and proceed no further.
        if (envid != 'null' && envid != '') {
            stage('azlogin') {
                wrap([$class: 'VaultBuildWrapper', vaultSecrets: azureSecrets]) {
                    // Login to azure using service principal
                    sh 'az login -u "$ARM_CLIENT_ID" -p "$ARM_CLIENT_SECRET" --service-principal --tenant "$ARM_TENANT_ID"'
                    // Ensure that we're scroped to the correct subscription
                    sh 'az account set --subscription "$ARM_SUBSCRIPTION_ID"'
                }
            }

            stage('version') {
                ansiColor('xterm') {
                    // Get latest version number for the image
                    version = sh script: "az vm image list -l \"${location}\" -p MicrosoftWindowsServer -s 2012-R2-Datacenter -f WindowsServer --all --query \"[].version\" -o tsv | sort -u | tail -n 1", returnStdout: true
                    version = version.trim()
                    versionNumber = VersionNumber versionNumberString: "${version}"
                    sh "echo \"version: ${version}\""
                }
            }

            stage("group") {
                ansiColor('xterm') {
                    // Check if the images resource group exists already
                    def groupExists = sh script:"az group exists -n ${resourceGroup}", returnStdout: true

                    if (groupExists.trim().toLowerCase() != "true") {
                        // If not, create it
                        sh "az group create -n ${resourceGroup} -l ${location}"
                    }
                }
            }

            stage('delete') {
                ansiColor('xterm') {
                    def existingId = sh script: "az image list -g '${resourceGroup}' --query \"[?name=='${envid}windows_server_2012_r2_datacenter'].id\" -o tsv", returnStdout: true
                    existingId = existingId.trim()

                    if (existingId != '') {
                        sh "az image delete --ids '${existingId}'"
                    }
                }
            }

            stage('build') {
                dir("windows/server_2012_r2_datacenter") {
                    ansiColor('xterm') {
                        wrap([$class: 'VaultBuildWrapper', vaultSecrets: azureSecrets]) {
                            // Run packer build command
                            sh "packer build -var 'azure_location=${location}' -var 'envid=${envid}' -var 'version=${version}' -var 'created_by=packer' template.json"
                        }
                    }
                }
            }
        }
    } catch (any) {
        // If there was an exception thrown, the build failed.
        currentBuild.result = "FAILED"
        throw any
    } finally {
        // Success or failure, always send notifications.
        notifyBuild(currentBuild.result, versionNumber)
    }
}

def notifyBuild(String buildStatus = 'STARTED', String version) {
  // Build status of null means successful.
  buildStatus =  buildStatus ?: 'SUCCESSFUL'

  // Default values.
  def colorName = 'RED'
  def colorCode = '#FF0000'
  def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' envid '${params.envid}' sub '${params.subscription}' version '${version}'"
  def envid = "${params.envid}".toLowerCase()

  if (envid == 'null' || envid == '') {
      subject = "${buildStatus}: CI Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
  }

  def summary = "${subject} (${env.BUILD_URL})"

  // Override default values based on build status.
  if (buildStatus == 'STARTED') {
    color = 'YELLOW'
    colorCode = '#FFFF00'
  } else if (buildStatus == 'INPUT_REQUIRED' || buildStatus == 'APPLYING' || buildStatus == 'DESTROYING'){
    color = 'BLUE'
    colorCode = '#0000FF'
  } else if (buildStatus == 'SUCCESSFUL') {
    color = 'GREEN'
    colorCode = '#00FF00'
  } else {
    color = 'RED'
    colorCode = '#FF0000'
  }

  // Send notifications.
  slackSend (color: colorCode, message: summary)
}
